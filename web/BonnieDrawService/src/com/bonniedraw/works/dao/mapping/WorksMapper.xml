<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bonniedraw.works.dao.WorksMapper">
  <resultMap id="BaseResultMap" type="com.bonniedraw.works.model.Works">
    <id column="WORKS_ID" jdbcType="INTEGER" property="worksId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="PRIVACY_TYPE" jdbcType="INTEGER" property="privacyType" />
    <result column="DEVICE_TYPE" jdbcType="INTEGER" property="deviceType" />
    <result column="TITLE" jdbcType="VARCHAR" property="title" />
    <result column="DESCRIPTION" jdbcType="VARCHAR" property="description" />
    <result column="IMAGE_PATH" jdbcType="VARCHAR" property="imagePath" />
    <result column="BDW_PATH" jdbcType="VARCHAR" property="bdwPath" />
    <result column="LANGUAGE_CODE" jdbcType="VARCHAR" property="languageCode" />
    <result column="COUNTRY_CODE" jdbcType="VARCHAR" property="countryCode" />
    <result column="STATUS" jdbcType="INTEGER" property="status" />
    <result column="CREATION_DATE" jdbcType="TIMESTAMP" property="creationDate" />
    <result column="CREATED_BY" jdbcType="INTEGER" property="createdBy" />
    <result column="UPDATE_DATE" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="UPDATED_BY" jdbcType="INTEGER" property="updatedBy" />
  </resultMap>
  <sql id="Base_Column_List">
    WORKS_ID, USER_ID, PRIVACY_TYPE, DEVICE_TYPE, TITLE, DESCRIPTION, IMAGE_PATH, BDW_PATH, 
    LANGUAGE_CODE, COUNTRY_CODE, STATUS, CREATION_DATE, CREATED_BY, UPDATE_DATE, UPDATED_BY
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from works
    where WORKS_ID = #{worksId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from works
    where WORKS_ID = #{worksId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bonniedraw.works.model.Works" useGeneratedKeys="true" keyProperty="worksId">
    insert into works (WORKS_ID, USER_ID, PRIVACY_TYPE, 
      DEVICE_TYPE, TITLE, DESCRIPTION, 
      IMAGE_PATH, BDW_PATH, LANGUAGE_CODE, 
      COUNTRY_CODE, STATUS, CREATION_DATE, 
      CREATED_BY, UPDATE_DATE, UPDATED_BY
      )
    values (#{worksId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{privacyType,jdbcType=INTEGER}, 
      #{deviceType,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{imagePath,jdbcType=VARCHAR}, #{bdwPath,jdbcType=VARCHAR}, #{languageCode,jdbcType=VARCHAR}, 
      #{countryCode,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{creationDate,jdbcType=TIMESTAMP}, 
      #{createdBy,jdbcType=INTEGER}, #{updateDate,jdbcType=TIMESTAMP}, #{updatedBy,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bonniedraw.works.model.Works">
    insert into works
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="worksId != null">
        WORKS_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="privacyType != null">
        PRIVACY_TYPE,
      </if>
      <if test="deviceType != null">
        DEVICE_TYPE,
      </if>
      <if test="title != null">
        TITLE,
      </if>
      <if test="description != null">
        DESCRIPTION,
      </if>
      <if test="imagePath != null">
        IMAGE_PATH,
      </if>
      <if test="bdwPath != null">
        BDW_PATH,
      </if>
      <if test="languageCode != null">
        LANGUAGE_CODE,
      </if>
      <if test="countryCode != null">
        COUNTRY_CODE,
      </if>
      <if test="status != null">
        STATUS,
      </if>
      <if test="creationDate != null">
        CREATION_DATE,
      </if>
      <if test="createdBy != null">
        CREATED_BY,
      </if>
      <if test="updateDate != null">
        UPDATE_DATE,
      </if>
      <if test="updatedBy != null">
        UPDATED_BY,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="worksId != null">
        #{worksId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="privacyType != null">
        #{privacyType,jdbcType=INTEGER},
      </if>
      <if test="deviceType != null">
        #{deviceType,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="bdwPath != null">
        #{bdwPath,jdbcType=VARCHAR},
      </if>
      <if test="languageCode != null">
        #{languageCode,jdbcType=VARCHAR},
      </if>
      <if test="countryCode != null">
        #{countryCode,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="creationDate != null">
        #{creationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=INTEGER},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bonniedraw.works.model.Works">
    update works
    <set>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="privacyType != null">
        PRIVACY_TYPE = #{privacyType,jdbcType=INTEGER},
      </if>
      <if test="deviceType != null">
        DEVICE_TYPE = #{deviceType,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        TITLE = #{title,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        DESCRIPTION = #{description,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        IMAGE_PATH = #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="bdwPath != null">
        BDW_PATH = #{bdwPath,jdbcType=VARCHAR},
      </if>
      <if test="languageCode != null">
        LANGUAGE_CODE = #{languageCode,jdbcType=VARCHAR},
      </if>
      <if test="countryCode != null">
        COUNTRY_CODE = #{countryCode,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        STATUS = #{status,jdbcType=INTEGER},
      </if>
      <if test="creationDate != null">
        CREATION_DATE = #{creationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        CREATED_BY = #{createdBy,jdbcType=INTEGER},
      </if>
      <if test="updateDate != null">
        UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        UPDATED_BY = #{updatedBy,jdbcType=INTEGER},
      </if>
    </set>
    where WORKS_ID = #{worksId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bonniedraw.works.model.Works">
    update works
    set USER_ID = #{userId,jdbcType=INTEGER},
      PRIVACY_TYPE = #{privacyType,jdbcType=INTEGER},
      DEVICE_TYPE = #{deviceType,jdbcType=INTEGER},
      TITLE = #{title,jdbcType=VARCHAR},
      DESCRIPTION = #{description,jdbcType=VARCHAR},
      IMAGE_PATH = #{imagePath,jdbcType=VARCHAR},
      BDW_PATH = #{bdwPath,jdbcType=VARCHAR},
      LANGUAGE_CODE = #{languageCode,jdbcType=VARCHAR},
      COUNTRY_CODE = #{countryCode,jdbcType=VARCHAR},
      STATUS = #{status,jdbcType=INTEGER},
      CREATION_DATE = #{creationDate,jdbcType=TIMESTAMP},
      CREATED_BY = #{createdBy,jdbcType=INTEGER},
      UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      UPDATED_BY = #{updatedBy,jdbcType=INTEGER}
    where WORKS_ID = #{worksId,jdbcType=INTEGER}
  </update>
  
  <update id="updateStatusByPrimaryKey" parameterType="com.bonniedraw.works.model.Works">
    update works
    set STATUS = #{status,jdbcType=INTEGER},
      UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      UPDATED_BY = #{updatedBy,jdbcType=INTEGER}
    where WORKS_ID = #{worksId,jdbcType=INTEGER}
  </update>
  
  <resultMap type="com.bonniedraw.web_api.module.WorksResponse" id="WorksResponseModule">
    <id column="WORKS_ID" jdbcType="INTEGER" property="worksId" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="PROFILE_PICTURE" jdbcType="VARCHAR" property="profilePicture" />
    <result column="PRIVACY_TYPE" jdbcType="INTEGER" property="privacyType" />
    <result column="DEVICE_TYPE" jdbcType="INTEGER" property="deviceType" />
    <result column="TITLE" jdbcType="VARCHAR" property="title" />
    <result column="DESCRIPTION" jdbcType="VARCHAR" property="description" />
    <result column="IMAGE_PATH" jdbcType="VARCHAR" property="imagePath" />
    <result column="BDW_PATH" jdbcType="VARCHAR" property="bdwPath" />
    <result column="LANGUAGE_CODE" jdbcType="VARCHAR" property="languageCode" />
    <result column="COUNTRY_CODE" jdbcType="VARCHAR" property="countryCode" />
    <result column="STATUS" jdbcType="INTEGER" property="status" />
    <result column="CREATION_DATE" jdbcType="TIMESTAMP" property="creationDate" />
    <result column="UPDATE_DATE" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="MSG_COUNT" jdbcType="INTEGER" property="msgCount" />
    <result column="LIKE_COUNT" jdbcType="INTEGER" property="likeCount" />
    <result column="isLike" jdbcType="BOOLEAN" property="isLike" />
    <result column="isCollection" jdbcType="BOOLEAN" property="isCollection" />
    <result column="isTurnIn" jdbcType="BOOLEAN" property="isTurnIn" />
    <collection property="likeList" ofType="com.bonniedraw.works.model.WorksLike" resultMap="LikeModuleMap"/>
    <collection property="msgList" ofType="com.bonniedraw.works.model.WorksMsg" resultMap="MsgModuleMap"/>
    <collection property="categoryList" ofType="com.bonniedraw.works.model.WorksCategory" resultMap="CategoryModuleMap"/>
  </resultMap>
  <resultMap id="LikeModuleMap" type="com.bonniedraw.works.model.WorksLike">
    <id column="WORKS_LIKE_ID" jdbcType="INTEGER" property="worksLikeId" />
    <result column="LIKE_WORKS_ID" jdbcType="INTEGER" property="worksId" />
    <result column="LIKE_USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="LIKE_TYPE" jdbcType="INTEGER" property="likeType" />
  </resultMap>
  <resultMap id="MsgModuleMap" type="com.bonniedraw.works.module.WorksMsgModule">
    <id column="WORKS_MSG_ID" jdbcType="INTEGER" property="worksMsgId" />
    <result column="MSG_WORKS_ID" jdbcType="INTEGER" property="worksId" />
    <result column="MSG_USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="MESSAGE" jdbcType="VARCHAR" property="message" />
    <result column="MSG_ORDER" jdbcType="INTEGER" property="msgOrder" />
    <result column="MSG_CREATION_DATE" jdbcType="TIMESTAMP" property="creationDate" />
     <result column="MSG_USER_NAME" jdbcType="VARCHAR" property="userName" />
  </resultMap>
  <resultMap id="CategoryModuleMap" type="com.bonniedraw.works.model.WorksCategory">
    <id column="WORKS_CATEGORY_ID" jdbcType="INTEGER" property="worksCategoryId" />
    <result column="CATEGORY_ID" jdbcType="INTEGER" property="categoryId" />
    <result column="CATEGORY_WORKS_ID" jdbcType="INTEGER" property="worksId" />
  </resultMap>
  
  <select id="queryWorks" parameterType="java.util.Map" resultMap="WorksResponseModule">
    select 
 	wk.WORKS_ID, wk.USER_ID, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE,
 	ur.USER_NAME, ur.PROFILE_PICTURE,  
 	WORKS_MSG_ID, MSG_WORKS_ID, MSG_USER_ID, MESSAGE, MSG_ORDER, MSG_CREATION_DATE, MSG_USER_NAME,
 	wc.WORKS_CATEGORY_ID, wc.CATEGORY_ID, wc.WORKS_ID as CATEGORY_WORKS_ID,
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
    case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection
    from works wk 
    left outer join user_info ur on ur.user_id = wk.user_id
    left outer join works_like as wl on wl.WORKS_ID = wk.WORKS_ID
    left outer join 
    (select 
    wm.WORKS_MSG_ID, wm.WORKS_ID as MSG_WORKS_ID, wm.USER_ID as MSG_USER_ID, wm.MESSAGE, wm.MSG_ORDER,
    wm.CREATION_DATE as MSG_CREATION_DATE, user_info.USER_NAME as  MSG_USER_NAME
    from works_msg wm left outer join user_info on wm.USER_ID = user_info.USER_ID ) t
    on t.MSG_WORKS_ID = wk.WORKS_ID
    left outer join works_category as wc on wc.WORKS_ID = wk.WORKS_ID
    where wk.WORKS_ID =  #{wid, jdbcType=INTEGER}
    order by MSG_CREATION_DATE desc
  </select>
  
  <select id="queryAllWorks" parameterType="java.util.Map" resultMap="WorksResponseModule">
    select 
 	wk.WORKS_ID, wk.USER_ID, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE,
 	ur.USER_NAME, ur.PROFILE_PICTURE,  
 	WORKS_MSG_ID, MSG_WORKS_ID, MSG_USER_ID, MESSAGE, MSG_ORDER, MSG_CREATION_DATE, MSG_USER_NAME,
 	wc.WORKS_CATEGORY_ID, wc.CATEGORY_ID, wc.WORKS_ID as CATEGORY_WORKS_ID,
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left outer join user_info ur on ur.user_id = wk.user_id
    left outer join works_like as wl on wl.WORKS_ID = wk.WORKS_ID
    left outer join 
    (select 
    wm.WORKS_MSG_ID, wm.WORKS_ID as MSG_WORKS_ID, wm.USER_ID as MSG_USER_ID, wm.MESSAGE, wm.MSG_ORDER,
    wm.CREATION_DATE as MSG_CREATION_DATE, user_info.USER_NAME as  MSG_USER_NAME
    from works_msg wm left outer join user_info on wm.USER_ID = user_info.USER_ID ) t
    on t.MSG_WORKS_ID = wk.WORKS_ID
    left outer join works_category as wc on wc.WORKS_ID = wk.WORKS_ID
    where 1=1
    and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    order by wk.CREATION_DATE desc
  </select>
  
  <select id="queryNewUploadWorks" parameterType="java.util.Map" resultMap="WorksResponseModule">
    select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT,
 	ifnull(wm.MSG_COUNT,0) as MSG_COUNT,  
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left outer join user_info ur on ur.user_id = wk.user_id
    left outer join (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID) as wl on wl.WORKS_ID = wk.WORKS_ID
    left join (select *, count(WORKS_MSG_ID) as MSG_COUNT from works_msg group by WORKS_ID ) as wm on wm.WORKS_ID = wk.WORKS_ID
	where 1=1 
    and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    order by wk.CREATION_DATE desc
    limit #{rc, jdbcType=INTEGER}
  </select>
  
  <select id="queryPopularWorks" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, wl.LIKE_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left outer join user_info ur on ur.USER_ID = wk.USER_ID
    left outer join (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID) as wl on wl.WORKS_ID = wk.WORKS_ID
	where 1=1 
    and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    order by wl.LIKE_COUNT desc, wk.WORKS_ID asc
    limit  #{rc, jdbcType=INTEGER}
  </select>
  
  <select id="queryOtherUserWorks" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	ifnull(wm.MSG_COUNT,0) as MSG_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left join user_info ur on ur.USER_ID = wk.USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
    left join
    (select *, count(WORKS_MSG_ID) as MSG_COUNT from works_msg group by WORKS_ID ) as wm on wm.WORKS_ID = wk.WORKS_ID
    where 1=1
    and wk.USER_ID = #{queryId, jdbcType=INTEGER}
    and wk.STATUS = 1
    and wk.PRIVACY_TYPE = 1
    order by wl.LIKE_COUNT desc, wk.WORKS_ID asc
    LIMIT #{rc, jdbcType=INTEGER}
  </select>
  
  <select id="seletMaxPagination" parameterType="java.lang.Integer" resultType="java.lang.Integer">
	select ifnull(CEILING(MAX(counted) / #{rc, jdbcType=INTEGER} ), 0) as maxPagination 
	from ( 
		select count(*) as counted from works 
		where PRIVACY_TYPE = 1
    	and STATUS = 1
	) as counts
  </select>
  
  <select id="seletMaxPaginationBindUser" parameterType="java.util.Map" resultType="java.lang.Integer">
	select ifnull(CEILING(MAX(counted) / #{limit, jdbcType=INTEGER} ), 0) as maxPagination 
	from ( 
		select count(*) as counted from works 
		where USER_ID = #{userId, jdbcType=INTEGER}
	) as counts
  </select>
  
  <select id="seletMaxPaginationBindFollow" parameterType="java.util.Map" resultType="java.lang.Integer">
	select ifnull(CEILING(MAX(counted) / #{limit, jdbcType=INTEGER} ), 0) as maxPagination
	from ( 
		select count(*) as counted 
       	from following fl left join works wk on fl.FOLLOWING_USER_ID = wk.USER_ID   
		where fl.USER_ID = #{userId, jdbcType=INTEGER}
        and wk.PRIVACY_TYPE = 1
		and wk.STATUS = 1
	) as counts
  </select>
  
  <select id="seletMaxPaginationBindCollection" parameterType="java.util.Map" resultType="java.lang.Integer">
	select ifnull(CEILING(MAX(counted) / #{limit, jdbcType=INTEGER} ), 0) as maxPagination 
	from ( 
		select count(*) as counted 
       	from works_collection wc left join works wk on wc.works_id = wk.works_id   
		where wc.COLLECTION_TYPE = 1
        and wk.PRIVACY_TYPE = 1
		and wk.STATUS = 1
	) as counts
  </select>
  
  <select id="seletMaxPaginationBindTagName" parameterType="java.util.Map" resultType="java.lang.Integer">
	select ifnull(CEILING(MAX(counted) / #{limit, jdbcType=INTEGER} ), 0) as maxPagination
	from ( 
		select count(*) as counted 
       	from works_tag wt left join works wk on wt.works_id = wk.works_id   
		where wt.tag_name = #{tagName, jdbcType=VARCHAR}
	) as counts
  </select>
  
  <select id="seletMaxPaginationBindSearch" parameterType="java.util.Map" resultType="java.lang.Integer">
	select ifnull(CEILING(MAX(counted) / #{limit, jdbcType=INTEGER} ), 0) as maxPagination 
	from ( 
			select wk.description, wk.title, count(wk.works_id) as counted 
			from works wk 
			left join works_tag wt on wt.works_id = wk.works_id and wt.tag_name LIKE CONCAT('%', #{search, jdbcType=VARCHAR}, '%')
			left join user_info ui on wk.user_id = ui.user_id and ui.user_name LIKE CONCAT('%', #{search, jdbcType=VARCHAR}, '%')
			where 1=1
            or wk.description LIKE CONCAT('%', #{search, jdbcType=VARCHAR}, '%') or wk.title LIKE CONCAT('%', #{search, jdbcType=VARCHAR}, '%')
			group by wk.works_id
	) as counts
  </select>
  
  <select id="queryPopularWorksPager" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection
    from works wk 
    left outer join user_info ur on ur.USER_ID = wk.USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
	where 1=1 
    and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    order by wl.LIKE_COUNT desc, wk.WORKS_ID asc
    LIMIT #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
  </select>
  
  <select id="queryUserWorksPager" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left join user_info ur on ur.USER_ID = wk.USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
    where 1=1
    and wk.USER_ID = #{userId, jdbcType=INTEGER}
    order by wl.LIKE_COUNT desc, wk.WORKS_ID asc
    LIMIT #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
  </select>
  
  <select id="queryOtherUserWorksPager" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	ifnull(wm.MSG_COUNT,0) as MSG_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left join user_info ur on ur.USER_ID = wk.USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
    left join
    (select *, count(WORKS_MSG_ID) as MSG_COUNT from works_msg group by WORKS_ID ) as wm on wm.WORKS_ID = wk.WORKS_ID
    where 1=1
    and wk.USER_ID = #{queryId, jdbcType=INTEGER}
    and wk.STATUS = 1
    and wk.PRIVACY_TYPE = 1
    order by wl.LIKE_COUNT desc, wk.WORKS_ID asc
    LIMIT #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
  </select>
  
  <select id="queryTrackWorksPager" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left join user_info ur on ur.USER_ID = wk.USER_ID
    right join following fl on wk.USER_ID = fl.FOLLOWING_USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
    where 1=1
    and fl.USER_ID = #{userId, jdbcType=INTEGER}
 	and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    order by wk.CREATION_DATE desc, wk.WORKS_ID asc
    LIMIT #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
  </select>
  
  <select id="queryCollectionWorksPager" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike
    from works wk 
    right join (select * from works_collection where user_id = #{userId, jdbcType=INTEGER} and collection_type = 1) wc on wc.works_id = wk.works_id
    left join user_info ur on ur.USER_ID = wk.USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
	where 1=1 
    and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    order by wk.UPDATE_DATE desc
    LIMIT #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
  </select>
  
  <select id="queryCategoryWorksPager" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike, 
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left join user_info ur on ur.USER_ID = wk.USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
	where 1=1 
    and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    and wk.WORKS_ID in 
    <foreach collection="list" item="element" index="index" open="(" separator=","  close=")">
    	#{element}
    </foreach>
    order by wk.UPDATE_DATE desc
    LIMIT #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
  </select>
  
  <select id="queryRelatedTagWorksPager" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    right join (select * from works_tag where tag_name = #{tagName, jdbcType=VARCHAR} ) wt on wt.works_id = wk.works_id
    left join user_info ur on ur.USER_ID = wk.USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
	where 1=1 
    and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    order by wk.UPDATE_DATE desc
    LIMIT #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
  </select>
  
  <select id="querySearchWorksPager" parameterType="java.util.Map" resultMap="WorksResponseModule">
	select 
 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	wl.WORKS_LIKE_ID, wl.WORKS_ID as LIKE_WORKS_ID, wl.USER_ID as LIKE_USER_ID, wl.LIKE_TYPE, ifnull(wl.LIKE_COUNT,0) as LIKE_COUNT, 
 	case when exists 
 	(select works_id from works_like where like_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isLike,
 	case when exists 
 	(select works_collection_id from works_collection where collection_type=1 and user_id = #{userId, jdbcType=INTEGER} and works_id = wk.WORKS_ID) 
 	then true else false end as isCollection 
    from works wk 
    left join works_tag wt on wt.works_id = wk.works_id
    left join user_info ur on ur.USER_ID = wk.USER_ID
    left join 
    (select *, count(WORKS_ID) as LIKE_COUNT from works_like where like_type=1 group by WORKS_ID ) as wl on wl.WORKS_ID = wk.WORKS_ID
	where 1=1 
    and wk.PRIVACY_TYPE = 1
    and wk.STATUS = 1
    and (wk.description LIKE CONCAT('%', #{search, jdbcType=VARCHAR}, '%') 
    or wk.title LIKE CONCAT('%', #{search, jdbcType=VARCHAR}, '%') 
    or wt.tag_name LIKE CONCAT('%', #{search, jdbcType=VARCHAR}, '%')
    or ur.user_name LIKE CONCAT('%', #{search, jdbcType=VARCHAR}, '%')
    )
    order by wk.UPDATE_DATE desc
    LIMIT #{offset, jdbcType=INTEGER}, #{limit, jdbcType=INTEGER}
  </select>
  
  <select id="queryWorkListBySearchWorkModule" parameterType="com.bonniedraw.works.module.SearchWorkModule" resultMap="WorksResponseModule">
    select distinct
    wk.WORKS_ID, wk.USER_ID, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION, wk.IMAGE_PATH, wk.BDW_PATH, 
    wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.CREATION_DATE, wk.CREATED_BY, wk.UPDATE_DATE, wk.UPDATED_BY,
    ui.USER_NAME
    from works wk
    left join user_info ui on wk.user_id = ui.user_id
    left join works_tag wt on wk.works_id = wt.works_id
    where 1=1 
    <if test="userName !=null and userName !='' "> and ui.user_name like concat('%', #{userName, jdbcType=VARCHAR}, '%') </if>
    <if test="email !=null and email !='' "> and ui.email = #{email, jdbcType=VARCHAR} </if>
    <if test="title !=null and title !='' "> and wk.title = #{title, jdbcType=VARCHAR} </if>
    <if test="description !=null and description !='' "> and wk.description = #{description, jdbcType=VARCHAR} </if>
    <if test="tagName !=null and tagName !='' "> and wt.tag_name = #{tagName, jdbcType=VARCHAR} </if>
    order by wk.works_id
    limit 100
  </select>
  
  <select id="queryWorkDetail" parameterType="com.bonniedraw.works.model.Works" resultMap="WorksResponseModule">
    select distinct 
 	wk.WORKS_ID, wk.USER_ID, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE,
 	ur.USER_NAME, 
 	(case when exists 
		(select works_id from turn_in ti where ti.status = 1 and ti.works_id = wk.works_id) 
	then true else false end) as isTurnIn
    from works wk 
    left outer join user_info ur on ur.user_id = wk.user_id
    left outer join works_like as wl on wl.WORKS_ID = wk.WORKS_ID
    left outer join 
    (select 
    wm.WORKS_MSG_ID, wm.WORKS_ID as MSG_WORKS_ID, wm.USER_ID as MSG_USER_ID, wm.MESSAGE, wm.MSG_ORDER,
    wm.CREATION_DATE as MSG_CREATION_DATE, user_info.USER_NAME as  MSG_USER_NAME
    from works_msg wm left outer join user_info on wm.USER_ID = user_info.USER_ID ) t
    on t.MSG_WORKS_ID = wk.WORKS_ID
	where wk.WORKS_ID = #{worksId,jdbcType=INTEGER}
  </select>
  
  <select id="queryTurnInWorkList" resultMap="WorksResponseModule">
    select distinct
    wk.WORKS_ID, wk.USER_ID, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION, wk.IMAGE_PATH, wk.BDW_PATH, 
    wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.CREATION_DATE, wk.CREATED_BY, wk.UPDATE_DATE, wk.UPDATED_BY,
    ui.USER_NAME
   	from works wk 
	right join turn_in ti on wk.works_id = ti.works_id
	left join user_info ui on wk.user_id = ui.user_id
  </select>
  
</mapper>