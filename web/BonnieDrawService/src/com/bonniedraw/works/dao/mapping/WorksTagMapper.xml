<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bonniedraw.works.dao.WorksTagMapper">
  <resultMap id="BaseResultMap" type="com.bonniedraw.works.model.WorksTag">
    <id column="WORKS_TAG_ID" jdbcType="INTEGER" property="worksTagId" />
    <result column="WORKS_ID" jdbcType="INTEGER" property="worksId" />
    <result column="TAG_NAME" jdbcType="VARCHAR" property="tagName" />
    <result column="TAG_ORDER" jdbcType="INTEGER" property="tagOrder" />
  </resultMap>
  <sql id="Base_Column_List">
    WORKS_TAG_ID, WORKS_ID, TAG_NAME, TAG_ORDER
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from works_tag
    where WORKS_TAG_ID = #{worksTagId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from works_tag
    where WORKS_TAG_ID = #{worksTagId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bonniedraw.works.model.WorksTag">
    insert into works_tag (WORKS_TAG_ID, WORKS_ID, TAG_NAME, 
      TAG_ORDER)
    values (#{worksTagId,jdbcType=INTEGER}, #{worksId,jdbcType=INTEGER}, #{tagName,jdbcType=VARCHAR}, 
      #{tagOrder,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.bonniedraw.works.model.WorksTag">
    insert into works_tag
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="worksTagId != null">
        WORKS_TAG_ID,
      </if>
      <if test="worksId != null">
        WORKS_ID,
      </if>
      <if test="tagName != null">
        TAG_NAME,
      </if>
      <if test="tagOrder != null">
        TAG_ORDER,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="worksTagId != null">
        #{worksTagId,jdbcType=INTEGER},
      </if>
      <if test="worksId != null">
        #{worksId,jdbcType=INTEGER},
      </if>
      <if test="tagName != null">
        #{tagName,jdbcType=VARCHAR},
      </if>
      <if test="tagOrder != null">
        #{tagOrder,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bonniedraw.works.model.WorksTag">
    update works_tag
    <set>
      <if test="worksId != null">
        WORKS_ID = #{worksId,jdbcType=INTEGER},
      </if>
      <if test="tagName != null">
        TAG_NAME = #{tagName,jdbcType=VARCHAR},
      </if>
      <if test="tagOrder != null">
        TAG_ORDER = #{tagOrder,jdbcType=INTEGER},
      </if>
    </set>
    where WORKS_TAG_ID = #{worksTagId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bonniedraw.works.model.WorksTag">
    update works_tag
    set WORKS_ID = #{worksId,jdbcType=INTEGER},
      TAG_NAME = #{tagName,jdbcType=VARCHAR},
      TAG_ORDER = #{tagOrder,jdbcType=INTEGER}
    where WORKS_TAG_ID = #{worksTagId,jdbcType=INTEGER}
  </update>
  
  <insert id="insertWorksTagList" parameterType="java.util.List">
    insert into works_tag (WORKS_ID, TAG_NAME, TAG_ORDER)
    values
	<foreach collection="list" item="element" index="index" open="(" separator="),("  close=")">
	   	#{element.worksId,jdbcType=INTEGER}, #{element.tagName,jdbcType=VARCHAR}, #{element.tagOrder,jdbcType=INTEGER}
	</foreach>
  </insert>
  
  <update id="updateWorksTagList" parameterType="java.util.List">
		<foreach collection="list" item="element" index="index" open="" close="" separator=";">
			update works_tag
			<set>
				 WORKS_ID = #{element.worksId,jdbcType=INTEGER},
      			TAG_NAME = #{element.tagName,jdbcType=VARCHAR},
      			TAG_ORDER = #{element.tagOrder,jdbcType=INTEGER}
			</set>
			where WORKS_TAG_ID = #{element.worksTagId,jdbcType=INTEGER}
		</foreach>
	</update>
	
	<delete id="deleteWorksTagList" parameterType="java.util.List">
   		delete from works_tag
    	where WORKS_TAG_ID in 
    	<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
    		#{item.worksTagId,jdbcType=INTEGER}
    	</foreach>
  	</delete>
  	
  	<delete id="deleteByWorksId" parameterType="java.lang.Integer">
    	delete from works_tag
   		where WORKS_ID = #{worksId,jdbcType=INTEGER}
  	</delete>
	
	<select id="selectByWorksId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    	select 
    	<include refid="Base_Column_List" />
    	from works_tag
    	where WORKS_ID = #{worksId, jdbcType=INTEGER}
  	</select>
  	
  	<select id="selectNextOrderNum" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    	select (ifnull(max(TAG_ORDER),0) + 1) as num 
    	from works_tag 
    	where WORKS_ID = #{worksId, jdbcType=INTEGER}
  	</select>
  		
  	<resultMap id="TagViewMap" type="com.bonniedraw.works.module.TagViewModule">
	  	<id column="TAG_NAME" jdbcType="VARCHAR" property="tagName" />
	  	<result column="count" jdbcType="INTEGER" property="count" />
	    <collection property="worksIdList" column="TAG_NAME" select="findByTagName" >
	    </collection>
  	</resultMap>
  	<select id="findByTagName" resultMap="BaseResultMap">
        SELECT WORKS_TAG_ID, WORKS_ID, TAG_ORDER
        FROM  works_tag 
        where TAG_NAME = #{TAG_NAME}
        order by WORKS_ID asc , TAG_ORDER asc
    </select>	
  	<select id="queryTagViewList" resultMap="TagViewMap">
  		SELECT wt.TAG_NAME, count(wt.TAG_NAME) as count FROM bonnie_draw_db.works_tag wt
		group by TAG_NAME
		order by count desc 
		limit 20
	</select>
	
	<select id="searchTagViewList" parameterType="java.lang.String" resultMap="TagViewMap">
  		SELECT wt.TAG_NAME, count(wt.TAG_NAME) as count FROM bonnie_draw_db.works_tag wt
		where wt.TAG_NAME like concat('%', #{ _parameter, jdbcType=VARCHAR} , '%')
		group by TAG_NAME
		order by count desc 
		limit 20
	</select>
	
	<resultMap type="com.bonniedraw.web_api.module.WorksResponse" id="WorksResponseModule">
	    <id column="WORKS_ID" jdbcType="INTEGER" property="worksId" />
	    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
	    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
	    <result column="PROFILE_PICTURE" jdbcType="VARCHAR" property="profilePicture" />
	    <result column="PRIVACY_TYPE" jdbcType="INTEGER" property="privacyType" />
	    <result column="DEVICE_TYPE" jdbcType="INTEGER" property="deviceType" />
	    <result column="TITLE" jdbcType="VARCHAR" property="title" />
	    <result column="DESCRIPTION" jdbcType="VARCHAR" property="description" />
	    <result column="IMAGE_PATH" jdbcType="VARCHAR" property="imagePath" />
	    <result column="BDW_PATH" jdbcType="VARCHAR" property="bdwPath" />
	    <result column="LANGUAGE_CODE" jdbcType="VARCHAR" property="languageCode" />
	    <result column="COUNTRY_CODE" jdbcType="VARCHAR" property="countryCode" />
	    <result column="STATUS" jdbcType="INTEGER" property="status" />
  	</resultMap>
	<select id="queryTagWorkList" parameterType="java.util.List" resultMap="WorksResponseModule">
		select 
	 	wk.WORKS_ID, wk.USER_ID, ur.USER_NAME, ur.PROFILE_PICTURE, wk.PRIVACY_TYPE, wk.DEVICE_TYPE, wk.TITLE, wk.DESCRIPTION,
	 	wk.IMAGE_PATH, wk.BDW_PATH, wk.LANGUAGE_CODE, wk.COUNTRY_CODE, wk.STATUS, wk.UPDATE_DATE
	    from works wk 
	    left join user_info ur on ur.USER_ID = wk.USER_ID
		where 1=1 
	    and wk.WORKS_ID in 
	    <foreach collection="list" item="element" index="index" open="(" separator=","  close=")">
	    	#{element.worksId}
	    </foreach>
	</select>
  
</mapper>