<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bonniedraw.user.dao.UserInfoMapper">
<resultMap id="OtherUserResult" type="com.bonniedraw.user.model.OtherUserModel" extends="BaseResultMap">
  <result column="isFollow" jdbcType="BOOLEAN" property="isFollow" />
</resultMap>
<resultMap id="BaseResultMap" type="com.bonniedraw.user.model.UserInfo">
    <id column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="USER_TYPE" jdbcType="INTEGER" property="userType" />
    <result column="USER_CODE" jdbcType="VARCHAR" property="userCode" />
    <result column="USER_PW" jdbcType="VARCHAR" property="userPw" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="NICK_NAME" jdbcType="VARCHAR" property="nickName" />
    <result column="EMAIL" jdbcType="VARCHAR" property="email" />
    <result column="SEC_EMAIL" jdbcType="VARCHAR" property="secEmail" />
    <result column="DESCRIPTION" jdbcType="VARCHAR" property="description" />
    <result column="WEB_LINK" jdbcType="VARCHAR" property="webLink" />
    <result column="PHONE_COUNTRY_CODE" jdbcType="VARCHAR" property="phoneCountryCode" />
    <result column="PHONE_NO" jdbcType="VARCHAR" property="phoneNo" />
    <result column="GENDER" jdbcType="INTEGER" property="gender" />
   	<result column="REG_FACEBOOK_ID" jdbcType="VARCHAR" property="regFacebookId" />
    <result column="REG_GOOGLE_ID" jdbcType="VARCHAR" property="regGoogleId" />
    <result column="REG_TWITTER_ID" jdbcType="VARCHAR" property="regTwitterId" />
    <result column="REG_WECHAT_ID" jdbcType="VARCHAR" property="regWechatId" />
    <result column="REG_RES1_ID" jdbcType="VARCHAR" property="regRes1Id" />
    <result column="REG_RES2_ID" jdbcType="VARCHAR" property="regRes2Id" />
    <result column="REG_RES3_ID" jdbcType="VARCHAR" property="regRes3Id" />
    <result column="PROFILE_PICTURE" jdbcType="VARCHAR" property="profilePicture" />
    <result column="BIRTHDAY" jdbcType="TIMESTAMP" property="birthday" />
    <result column="STATUS" jdbcType="INTEGER" property="status" />
    <result column="LANGUAGE_CODE" jdbcType="VARCHAR" property="languageCode" />
    <result column="COUNTRY_CODE" jdbcType="VARCHAR" property="countryCode" />
    <result column="REG_DATA" jdbcType="VARCHAR" property="regData" />
    <result column="REG_VALID_DATE" jdbcType="TIMESTAMP" property="regValidDate" />
    <result column="CREATION_DATE" jdbcType="TIMESTAMP" property="creationDate" />
    <result column="CREATED_BY" jdbcType="INTEGER" property="createdBy" />
    <result column="UPDATE_DATE" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="UPDATED_BY" jdbcType="INTEGER" property="updatedBy" />
  </resultMap>
  <sql id="Base_Column_List">
    USER_ID, USER_TYPE, USER_CODE, USER_PW, USER_NAME, NICK_NAME, EMAIL, SEC_EMAIL, DESCRIPTION, 
    WEB_LINK, PHONE_COUNTRY_CODE, PHONE_NO, GENDER, REG_FACEBOOK_ID, REG_GOOGLE_ID, REG_TWITTER_ID, 
    REG_WECHAT_ID, REG_RES1_ID, REG_RES2_ID, REG_RES3_ID, PROFILE_PICTURE, BIRTHDAY, 
    STATUS, LANGUAGE_CODE, COUNTRY_CODE, REG_DATA, REG_VALID_DATE, CREATION_DATE, CREATED_BY, 
    UPDATE_DATE, UPDATED_BY
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_info
    where USER_ID = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_info
    where USER_ID = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bonniedraw.user.model.UserInfo" useGeneratedKeys="true" keyProperty="userId">
    insert into user_info (USER_ID, USER_TYPE, USER_CODE, 
      USER_PW, USER_NAME, NICK_NAME, 
      EMAIL, SEC_EMAIL, DESCRIPTION, 
      WEB_LINK, PHONE_COUNTRY_CODE, PHONE_NO, 
      GENDER, REG_FACEBOOK_ID, REG_GOOGLE_ID, 
      REG_TWITTER_ID, REG_WECHAT_ID, REG_RES1_ID, 
      REG_RES2_ID, REG_RES3_ID, PROFILE_PICTURE, 
      BIRTHDAY, STATUS, LANGUAGE_CODE, 
      COUNTRY_CODE, REG_DATA, REG_VALID_DATE, 
      CREATION_DATE, CREATED_BY, UPDATE_DATE, 
      UPDATED_BY)
    values (#{userId,jdbcType=INTEGER}, #{userType,jdbcType=INTEGER}, #{userCode,jdbcType=VARCHAR}, 
      #{userPw,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{secEmail,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{webLink,jdbcType=VARCHAR}, #{phoneCountryCode,jdbcType=VARCHAR}, #{phoneNo,jdbcType=VARCHAR}, 
      #{gender,jdbcType=INTEGER}, #{regFacebookId,jdbcType=VARCHAR}, #{regGoogleId,jdbcType=VARCHAR}, 
      #{regTwitterId,jdbcType=VARCHAR}, #{regWechatId,jdbcType=VARCHAR}, #{regRes1Id,jdbcType=VARCHAR}, 
      #{regRes2Id,jdbcType=VARCHAR}, #{regRes3Id,jdbcType=VARCHAR}, #{profilePicture,jdbcType=VARCHAR}, 
      #{birthday,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, #{languageCode,jdbcType=VARCHAR}, 
      #{countryCode,jdbcType=VARCHAR}, #{regData,jdbcType=VARCHAR}, #{regValidDate,jdbcType=TIMESTAMP}, 
      #{creationDate,jdbcType=TIMESTAMP}, #{createdBy,jdbcType=INTEGER}, #{updateDate,jdbcType=TIMESTAMP}, 
      #{updatedBy,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.bonniedraw.user.model.UserInfo">
    insert into user_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="userType != null">
        USER_TYPE,
      </if>
      <if test="userCode != null">
        USER_CODE,
      </if>
      <if test="userPw != null">
        USER_PW,
      </if>
      <if test="userName != null">
        USER_NAME,
      </if>
      <if test="nickName != null">
        NICK_NAME,
      </if>
      <if test="email != null">
        EMAIL,
      </if>
      <if test="secEmail != null">
        SEC_EMAIL,
      </if>
      <if test="description != null">
        DESCRIPTION,
      </if>
      <if test="webLink != null">
        WEB_LINK,
      </if>
      <if test="phoneCountryCode != null">
        PHONE_COUNTRY_CODE,
      </if>
      <if test="phoneNo != null">
        PHONE_NO,
      </if>
      <if test="gender != null">
        GENDER,
      </if>
      <if test="regFacebookId != null">
        REG_FACEBOOK_ID,
      </if>
      <if test="regGoogleId != null">
        REG_GOOGLE_ID,
      </if>
      <if test="regTwitterId != null">
        REG_TWITTER_ID,
      </if>
      <if test="regWechatId != null">
        REG_WECHAT_ID,
      </if>
      <if test="regRes1Id != null">
        REG_RES1_ID,
      </if>
      <if test="regRes2Id != null">
        REG_RES2_ID,
      </if>
      <if test="regRes3Id != null">
        REG_RES3_ID,
      </if>
      <if test="profilePicture != null">
        PROFILE_PICTURE,
      </if>
      <if test="birthday != null">
        BIRTHDAY,
      </if>
      <if test="status != null">
        STATUS,
      </if>
      <if test="languageCode != null">
        LANGUAGE_CODE,
      </if>
      <if test="countryCode != null">
        COUNTRY_CODE,
      </if>
      <if test="regData != null">
        REG_DATA,
      </if>
      <if test="regValidDate != null">
        REG_VALID_DATE,
      </if>
      <if test="creationDate != null">
        CREATION_DATE,
      </if>
      <if test="createdBy != null">
        CREATED_BY,
      </if>
      <if test="updateDate != null">
        UPDATE_DATE,
      </if>
      <if test="updatedBy != null">
        UPDATED_BY,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userType != null">
        #{userType,jdbcType=INTEGER},
      </if>
      <if test="userCode != null">
        #{userCode,jdbcType=VARCHAR},
      </if>
      <if test="userPw != null">
        #{userPw,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="secEmail != null">
        #{secEmail,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="webLink != null">
        #{webLink,jdbcType=VARCHAR},
      </if>
      <if test="phoneCountryCode != null">
        #{phoneCountryCode,jdbcType=VARCHAR},
      </if>
      <if test="phoneNo != null">
        #{phoneNo,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="regFacebookId != null">
        #{regFacebookId,jdbcType=VARCHAR},
      </if>
      <if test="regGoogleId != null">
        #{regGoogleId,jdbcType=VARCHAR},
      </if>
      <if test="regTwitterId != null">
        #{regTwitterId,jdbcType=VARCHAR},
      </if>
      <if test="regWechatId != null">
        #{regWechatId,jdbcType=VARCHAR},
      </if>
      <if test="regRes1Id != null">
        #{regRes1Id,jdbcType=VARCHAR},
      </if>
      <if test="regRes2Id != null">
        #{regRes2Id,jdbcType=VARCHAR},
      </if>
      <if test="regRes3Id != null">
        #{regRes3Id,jdbcType=VARCHAR},
      </if>
      <if test="profilePicture != null">
        #{profilePicture,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="languageCode != null">
        #{languageCode,jdbcType=VARCHAR},
      </if>
      <if test="countryCode != null">
        #{countryCode,jdbcType=VARCHAR},
      </if>
      <if test="regData != null">
        #{regData,jdbcType=VARCHAR},
      </if>
      <if test="regValidDate != null">
        #{regValidDate,jdbcType=TIMESTAMP},
      </if>
      <if test="creationDate != null">
        #{creationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=INTEGER},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bonniedraw.user.model.UserInfo">
    update user_info
    <set>
      <if test="userType != null">
        USER_TYPE = #{userType,jdbcType=INTEGER},
      </if>
      <if test="userCode != null">
        USER_CODE = #{userCode,jdbcType=VARCHAR},
      </if>
      <if test="userPw != null">
        USER_PW = #{userPw,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        USER_NAME = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        NICK_NAME = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="secEmail != null">
        SEC_EMAIL = #{secEmail,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        DESCRIPTION = #{description,jdbcType=VARCHAR},
      </if>
      <if test="webLink != null">
        WEB_LINK = #{webLink,jdbcType=VARCHAR},
      </if>
      <if test="phoneCountryCode != null">
        PHONE_COUNTRY_CODE = #{phoneCountryCode,jdbcType=VARCHAR},
      </if>
      <if test="phoneNo != null">
        PHONE_NO = #{phoneNo,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        GENDER = #{gender,jdbcType=INTEGER},
      </if>
      <if test="regFacebookId != null">
        REG_FACEBOOK_ID = #{regFacebookId,jdbcType=VARCHAR},
      </if>
      <if test="regGoogleId != null">
        REG_GOOGLE_ID = #{regGoogleId,jdbcType=VARCHAR},
      </if>
      <if test="regTwitterId != null">
        REG_TWITTER_ID = #{regTwitterId,jdbcType=VARCHAR},
      </if>
      <if test="regWechatId != null">
        REG_WECHAT_ID = #{regWechatId,jdbcType=VARCHAR},
      </if>
      <if test="regRes1Id != null">
        REG_RES1_ID = #{regRes1Id,jdbcType=VARCHAR},
      </if>
      <if test="regRes2Id != null">
        REG_RES2_ID = #{regRes2Id,jdbcType=VARCHAR},
      </if>
      <if test="regRes3Id != null">
        REG_RES3_ID = #{regRes3Id,jdbcType=VARCHAR},
      </if>
      <if test="profilePicture != null">
        PROFILE_PICTURE = #{profilePicture,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        BIRTHDAY = #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        STATUS = #{status,jdbcType=INTEGER},
      </if>
      <if test="languageCode != null">
        LANGUAGE_CODE = #{languageCode,jdbcType=VARCHAR},
      </if>
      <if test="countryCode != null">
        COUNTRY_CODE = #{countryCode,jdbcType=VARCHAR},
      </if>
      <if test="regData != null">
        REG_DATA = #{regData,jdbcType=VARCHAR},
      </if>
      <if test="regValidDate != null">
        REG_VALID_DATE = #{regValidDate,jdbcType=TIMESTAMP},
      </if>
      <if test="creationDate != null">
        CREATION_DATE = #{creationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        CREATED_BY = #{createdBy,jdbcType=INTEGER},
      </if>
      <if test="updateDate != null">
        UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        UPDATED_BY = #{updatedBy,jdbcType=INTEGER},
      </if>
    </set>
    where USER_ID = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bonniedraw.user.model.UserInfo">
    update user_info
    set USER_TYPE = #{userType,jdbcType=INTEGER},
      USER_CODE = #{userCode,jdbcType=VARCHAR},
      USER_PW = #{userPw,jdbcType=VARCHAR},
      USER_NAME = #{userName,jdbcType=VARCHAR},
      NICK_NAME = #{nickName,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      SEC_EMAIL = #{secEmail,jdbcType=VARCHAR},
      DESCRIPTION = #{description,jdbcType=VARCHAR},
      WEB_LINK = #{webLink,jdbcType=VARCHAR},
      PHONE_COUNTRY_CODE = #{phoneCountryCode,jdbcType=VARCHAR},
      PHONE_NO = #{phoneNo,jdbcType=VARCHAR},
      GENDER = #{gender,jdbcType=INTEGER},
      REG_FACEBOOK_ID = #{regFacebookId,jdbcType=VARCHAR},
      REG_GOOGLE_ID = #{regGoogleId,jdbcType=VARCHAR},
      REG_TWITTER_ID = #{regTwitterId,jdbcType=VARCHAR},
      REG_WECHAT_ID = #{regWechatId,jdbcType=VARCHAR},
      REG_RES1_ID = #{regRes1Id,jdbcType=VARCHAR},
      REG_RES2_ID = #{regRes2Id,jdbcType=VARCHAR},
      REG_RES3_ID = #{regRes3Id,jdbcType=VARCHAR},
      PROFILE_PICTURE = #{profilePicture,jdbcType=VARCHAR},
      BIRTHDAY = #{birthday,jdbcType=TIMESTAMP},
      STATUS = #{status,jdbcType=INTEGER},
      LANGUAGE_CODE = #{languageCode,jdbcType=VARCHAR},
      COUNTRY_CODE = #{countryCode,jdbcType=VARCHAR},
      REG_DATA = #{regData,jdbcType=VARCHAR},
      REG_VALID_DATE = #{regValidDate,jdbcType=TIMESTAMP},
      CREATION_DATE = #{creationDate,jdbcType=TIMESTAMP},
      CREATED_BY = #{createdBy,jdbcType=INTEGER},
      UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      UPDATED_BY = #{updatedBy,jdbcType=INTEGER}
    where USER_ID = #{userId,jdbcType=INTEGER}
  </update>
  
  <update id="updateStatusByPrimaryKey" parameterType="com.bonniedraw.user.model.UserInfo">
    update user_info
    set STATUS = #{status,jdbcType=INTEGER}
    where USER_ID = #{userId,jdbcType=INTEGER}
  </update>
  
	<select id="inspectAppPwd" parameterType="com.bonniedraw.web_api.model.request.LoginRequestVO" resultMap="BaseResultMap">
		select 
		USER_ID, USER_TYPE, USER_CODE, USER_NAME, NICK_NAME, EMAIL, SEC_EMAIL, DESCRIPTION, 
    	WEB_LINK, PHONE_COUNTRY_CODE, PHONE_NO, GENDER, PROFILE_PICTURE, BIRTHDAY, 
    	STATUS, LANGUAGE_CODE, COUNTRY_CODE
		from user_info
		where 1 = 1
		<if test="ut == 1 "> and USER_CODE = #{uc, jdbcType=VARCHAR} and USER_PW = #{up,jdbcType=VARCHAR} and STATUS = 1 </if>
		<if test="ut == 2 ">	 and REG_FACEBOOK_ID = #{uc, jdbcType=VARCHAR} </if>
		<if test="ut == 3 "> and REG_GOOGLE_ID = #{uc, jdbcType=VARCHAR} </if>
		<if test="ut == 4 "> and REG_TWITTER_ID = #{uc, jdbcType=VARCHAR} </if>
		and STATUS !=2
	</select>
	
	<select id="selectByUserCode" parameterType="java.lang.String" resultMap="BaseResultMap">
    	select 
    	USER_ID, USER_TYPE, USER_CODE, USER_NAME, NICK_NAME, EMAIL, SEC_EMAIL, DESCRIPTION, 
    	WEB_LINK, PHONE_COUNTRY_CODE, PHONE_NO, GENDER, PROFILE_PICTURE, BIRTHDAY, 
    	STATUS, LANGUAGE_CODE, COUNTRY_CODE
    	from user_info
    	where USER_CODE= #{userCode, jdbcType=VARCHAR}
    </select>
	
	<select id="inspectRegister" parameterType="com.bonniedraw.web_api.model.request.LoginRequestVO" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from user_info
		where 1=1
		and 
		<if test="ut == 1 "> USER_CODE = #{uc, jdbcType=VARCHAR} </if>
		<if test="ut == 2 ">	 REG_FACEBOOK_ID = #{uc, jdbcType=VARCHAR} </if>
		<if test="ut == 3 "> REG_GOOGLE_ID = #{uc, jdbcType=VARCHAR} </if>
		<if test="ut == 4 "> REG_TWITTER_ID = #{uc, jdbcType=VARCHAR} </if>
		<if test="ut == 2 or ut ==3 or ut ==4"> and USER_CODE =  #{thirdEmail, jdbcType=VARCHAR} </if>
	</select>
	
	<select id="inspectRegisterByUserInfo" parameterType="com.bonniedraw.user.model.UserInfo" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from user_info
		where USER_CODE = #{userCode, jdbcType=VARCHAR}
	</select>
	
	<select id="inspectOldPwd" parameterType="com.bonniedraw.user.model.UserInfo" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from user_info
		where USER_ID = #{userId,jdbcType=INTEGER}
		and USER_PW = #{userPw,jdbcType=VARCHAR} 
	</select>
	
	<select id="queryUserList" parameterType="com.bonniedraw.user.model.UserInfo" resultMap="BaseResultMap">
    	select 
    	<include refid="Base_Column_List" />
    	from user_info
    	where 1=1
    	<if test="userName !=null and userName !='' "> and USER_NAME LIKE CONCAT('%', #{userName, jdbcType=VARCHAR}, '%') </if>
    	<if test="email !=null and email !='' "> and EMAIL = #{email, jdbcType=VARCHAR } </if>
    	<if test="status == 1 or status == 2 "> and STATUS = #{status, jdbcType=INTEGER } </if>
    	limit 100
  	</select>
  	
  	<select id="queryOtherUserInfo" parameterType="java.util.Map" resultMap="OtherUserResult">
    	select 
    	<include refid="Base_Column_List" />, 
		(case when exists (select following_id from following where following_user_id= #{queryId,jdbcType=INTEGER} and USER_ID = #{userId,jdbcType=INTEGER} ) then true else false end) as isFollow
		from user_info where USER_ID = #{queryId,jdbcType=INTEGER} and status !=2
  	</select>
  	
  	<select id="getUserCounter" parameterType="java.lang.Integer" resultType="com.bonniedraw.user.model.UserCounter">
    	select * from (
			(select count(WORKS_ID) as worksNum from WORKS where USER_ID = #{userId,jdbcType=INTEGER} ) wk,
			(select count(FOLLOWING_ID) as fansNum from FOLLOWING where FOLLOWING_USER_ID = #{userId,jdbcType=INTEGER} ) fan,
			(select count(FOLLOWING_ID) as followNum from FOLLOWING where USER_ID = #{userId,jdbcType=INTEGER} ) fol
		)
  	</select>
  	
  	<select id="queryTokenUser" parameterType="java.lang.String" resultMap="BaseResultMap">
    	select 
    	<include refid="Base_Column_List" />
    	from user_info
    	where STATUS = 0
    	and REG_DATA = #{token, jdbcType=VARCHAR}
  	</select>
  	
  	<select id="getUserFriendsList" parameterType="java.util.Map" resultMap="BaseResultMap">
    	select user_id, user_name, profile_picture
		from 
		(select user_id, user_name, profile_picture, reg_facebook_id, reg_google_id, reg_twitter_id from user_info where user_id in 
			<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		) t
		where
		t.user_id not in (
			select following_user_id from following where user_id= #{userId, jdbcType=INTEGER} 
			and following_user_id in 
			<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		)
		<if test="thirdPlatform == 2 ">and t.reg_facebook_id is not null</if>
		<if test="thirdPlatform == 3 ">and t.reg_google_id is not null</if>
		<if test="thirdPlatform == 4 ">and t.reg_twitter_id is not null</if>
  	</select>
  	
  	<resultMap id="UserInfoResponseModule" type="com.bonniedraw.web_api.module.UserInfoResponse">
    	<id column="USER_ID" jdbcType="INTEGER" property="userId" />
    	<result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    	<result column="PROFILE_PICTURE" jdbcType="VARCHAR" property="profilePicture" />
    	 <result column="isFollowing" jdbcType="BOOLEAN" property="isFollowing" />
  	</resultMap>
  	<select id="queryUserByIds" parameterType="java.util.Map" resultMap="UserInfoResponseModule">
    	select ui.user_id, ui.user_name, uiprofile_picture,
    	(case when user_id = tmp.following_user_id then true else false end) as isFollowing
		from user_info ui,
		(select following_user_id from following where user_id = #{userId,jdbcType=INTEGER} ) tmp
		where user_id in 
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
  	</select>
  
  
</mapper>